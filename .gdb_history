p i % 2 == 0
step
p cur_char
p cur_char - '0'
p 9 << 4
p i % 2 == 0
step
p cur_byte
step
p cur_byte
q
b main
run
step
q
b main
run
step
p cur_byte
step
p cur_byte
step
b 70
step
c
p byte
step
step
p c[0]
step
p c
step
p c
step
step
p bytes[i]
step
p byte
step
step
p c
step
p c
step
q
b main
step
run
step
b calc_mrse
c
up
list
p freqs
q
b main
run
step
p calc_freqs
c
62;c62;cq
q
b calc_freqs
run
step
step
step
step
step
step
step
step
step
step
step
step
step
step
step
step
step
si
si
step
p bytes
p bytes[i]
p 'a'
step
step
p freqs
p freqs[0]
p freqs*
p *freqs
p freqs[1]
p freqs[2]
step
q
b main
step
run
step
p key
watch key
cond 2 key=='X'
c
p key
step
step
step
b 44
c
p freqs
p freqs[0]
p strlen
p bytes
p freqs
step
p bytes[i] - 'A'
step
p freqs[2]
p freqs[1]
p 1/34.0
step
step
step
p count_letters
step
p i
step
p i
step
p i
step
p i
step
p freqs
p freqs[0]
p *freqs@10
p *freqs@34
q
b main
step
run
step
b 54
step
b 66
c
del 3
step
c
c
c
step
up
list
list
p len
watch key
q
b main
run
step
q
b main
run
step
p line
step
b 57
c
step
q
b 60
run
step
q
b utils.c:decode_base64
b utils.cpp:decode_base64
run
step
p strlen
step
p bindex
list
list
b 118
c
step
list
q
b 60
run
b 64
c
p %rax
5 $rax
p %rax
p $rax
p $rdi
backtrace
q
b utils.cpp:decode_base64
run
list
list
list
b 118
run
c
backtrace
disas 
si 1
si
si
si
si
si
p $rax
si
si
si
si
si
si
si
si
si
si
si
si
si
si
backtrace
p args
info args
x mem
info locals
info globals
up
info locals
p infile
p *infile
p &infile
p &test_base64_output
p &line
p &decoded_bytes
p decoded_bytes
p *line
p line
p line[0]
p &line[0]
si
si
si
q
